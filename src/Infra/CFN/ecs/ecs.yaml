AWSTemplateFormatVersion: 2010-09-09
Description: Sets up ecs cluster
Parameters:
  ClusterName:
    Type: String
    AllowedValues:
      - dev
      - stage
      - qa
      - prod
    Description: Environment where cluster running

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Amazon EC2 Key Pair Name

  AvailableHostedZoneName:
    Type: AWS::Route53::HostedZone::Name
    Description: HostedZone name
  
  NewHostedZoneName:
    Type: String
    Default: ""
    Description: New Hosted Zone Name. If Has no a existent Hostzone name, create a here.

  ECSInstanceType:
    Type: String
    AllowedValues:
      - t3.medium
      - t3.large
      - t3a.medium
      - t3a.large
      Default: t3a.medium
    Description: Medium have 2vCPU x 4GiB Mermory, large  have 2vCPU x 8GiB Mermory

  AsgServiceMin:
    Type: String
    MinValue: 1
    Default: 1
    Description: Min. ec2 instances required

  AsgServiceDesired:
    Type: String
    MinValue: 1
    Default: 1
    Description: Desired ec2 instances required

  AsgServiceMax:
    Type: String
    MaxValue: 10
    Default: 2
    Description: Max. ec2 instances required

  PubSg1: {'Fn::ImportValue': !Sub "${ClusterName}PublicSubnet1"}
  
  PubSg2: {'Fn::ImportValue': !Sub "${ClusterName}PublicSubnet2"}
  
  PubSg3: {'Fn::ImportValue': !Sub "${ClusterName}PublicSubnet3"}

Conditions:
  HasPubSg1: !Equals [ !Ref PubSg1 ,!Sub ${ClusterName}PublicSubnet1 ]
  HasPubSg2: !Equals [ !Ref PubSg2 ,!Sub ${ClusterName}PublicSubnet2 ]
  HasPubSg3: !Equals [ !Ref PubSg3 ,!Sub ${ClusterName}PublicSubnet3 ]
  HasNewHostedZoneName: !Not [ !Equals [ !Sub NewHostedZoneName, "" ] ]
  HasAHostedZone: !Not [!Condition HasNewHostedZoneName ]

Mappings:
  AMIMap:
    us-east-1:
      AMI: "ami-09d3b3274b6c5d4aa"
    us-east-2:
      AMI: "ami-089a545a9ed9893b6"
    us-west-1:
      AMI: "ami-017c001a88dd93847"
    eu-west-2:
      AMI: "ami-0d593311db5abb72b"

Resources:
#========== LOG GROUP
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs-cluster/${ClusterName}
      RetentionInDays: 7

#========== ROLES
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${ClusterName}_EC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
      InstanceProfileName: !Sub ${AWS::Region}-${ClusterName}_EC2InstanceProfile

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${ClusterName}_ECSRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

#========== SECURITY GROUPS
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub ${ClusterName}VPC
      GroupName: !Sub ${ClusterName}AllowSSH
      GroupDescription: Enables access to all IPs to port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 22
          ToPort: 22
          CidrIp: 172.20.0.0/20

#========== ECS
  PrivateNameSpace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: !Sub Private Name for Cluster ${ClusterName}
      Vpc:
        'Fn::ImportValue': !Sub ${ClusterName}VPC
      Name: !Sub ${ClusterName}.internal

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ClusterName}

#========== BATION
  BastionEIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName} bastion
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSecurityGroup
            - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup
          SubnetId:
            'Fn::ImportValue': !Sub ${ClusterName}PublicSubnet1
      ImageId: !FindInMap [ AMIMap, !Ref "AWS::Region", AMI ]
      InstanceType: t2.micro
      KeyName: !Sub KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile

  BastionAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt BastionEIP.AllocationId
      InstanceId: !Ref BastionInstance

  BastionDNS: 
    Type: "AWS::Route53::HostedZone"
    Condition: HasNewHostedZoneName
    Properties: 
      HostedZoneConfig: 
        Comment: !Join [" ", "Host Zone:", !Sub NewHostedZoneName]
      Name: !Sub NewHostedZoneName

  BastionRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub AvailableHostedZoneName
      RecordSets:
        - !If 
          - HasNewHostedZoneName
          - Name: !Sub ${ClusterName}-bastion.${NewHostedZoneName}
            Type: A
            TTL: 5
            ResourceRecords:
            - !Ref BastionEIP
          - Name: !Sub ${ClusterName}-bastion.${AvailableHostedZoneName}
            Type: A
            TTL: 5
            ResourceRecords:
            - !Ref BastionEIP

#========== EFS
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key : Name
          Value: !Sub ${ClusterName}
      PerformanceMode: generalPurpose

  EfsMountTargetSubnet1:
    Type: AWS::EFS::MountTarget
    Condition: HasPubSg1
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: 
        'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet1
      SecurityGroups: #required
        - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup

  EfsMountTargetSubnet2:
    Type: AWS::EFS::MountTarget
    Condition: HasPubSg2
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: 
        'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet2
      SecurityGroups:
        - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup
  
  EfsMountTargetSubnet3:
    Type: AWS::EFS::MountTarget
    Condition: HasPubSg3
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: 
        'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet3
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup

#========== LAUNCH CONFIGURATION
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Sub KeyName
      ImageId: !FindInMap [ AMIMap, !Ref "AWS::Region", AMI ] 
      SecurityGroups:
        - 'Fn::ImportValue': !Sub ${ClusterName}InternalAccessSecurityGroup
      InstanceType: !Ref ECSInstanceType
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: '25'
        - DeviceName: "/dev/xvdcz"
          Ebs:
            VolumeSize: '25'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #====== Resize EBS
            resize2fs /dev/xvda
            resize2fs /dev/xvdcz

          #====== Mount EFS
            yum install -y nfs-utils
            mkdir /efs

            mount -t nfs4 -o nfsvers=4.1 ${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /efs
            echo '${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >> /etc/fstab

          #====== Install SSM
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            start amazon-ssm-agent
            chkconfig amazon-ssm-agent on

          #====== Install AWSLOGS
            yum install -y awslogs
            mv /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bkp
            echo "[general] state_file = /var/lib/awslogs/agent-state
                        
            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/dmesg/instanceID
                        
            [/var/log/messages]
            file = /var/log/messages
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/messages/instanceID
            datetime_format = %b %d %H:%M:%S
                        
            [/var/log/docker]
            file = /var/log/docker
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/docker/instanceID
            datetime_format = %Y-%m-%dT%H:%M:%S.%f
                        
            [/var/log/ecs/ecs-init.log]
            file = /var/log/ecs/ecs-init.log*
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/ecs-init.log/instanceID
            datetime_format = %Y-%m-%dT%H:%M:%SZ
                        
            [/var/log/ecs/ecs-agent.log]
            file = /var/log/ecs/ecs-agent.log.*
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/ecs-agent.log/instanceID
            datetime_format = %Y-%m-%dT%H:%M:%SZ
                        
            [/var/log/ecs/audit.log]
            file = /var/log/ecs/audit.log.*
            log_group_name = clustername
            log_stream_name = /ecs-instance-log/audit.log/instanceID
            datetime_format = %Y-%m-%dT%H:%M:%SZ" >> /etc/awslogs/awslogs.conf

            sed -i "s/clustername/${ECSCluster}/g" /etc/awslogs/awslogs.conf
            sed -i "s/instanceID/`curl -s http://169.254.169.254/latest/meta-data/instance-id`/g" /etc/awslogs/awslogs.conf
            service awslogs start
            chkconfig awslogs on

            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            echo ECS_INSTANCE_ATTRIBUTES={\"cluster_type\":\"web\"} >> /etc/ecs/ecs.config

#========== AUTO SCALE GROUP
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName} cluster
          PropagateAtLaunch: true
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref AsgServiceMin
      DesiredCapacity: !Ref AsgServiceDesired
      MaxSize: !Ref AsgServiceMax
      TargetGroupARNs:
        - 'Fn::ImportValue': !Sub ${ClusterName}BackendAlbDefaultTargetGroup
      VPCZoneIdentifier:
        - !If 
          - HasPubSg1
          - 'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet1
          - !Ref AWS::NoValue
        - !If 
          - HasPubSg2
          - 'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet2
          - !Ref AWS::NoValue
        - !If 
          - HasPubSg3
          - 'Fn::ImportValue': !Sub ${ClusterName}PrivateSubnet3
          - !Ref AWS::NoValue
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: !Ref AsgServiceDesired
        PauseTime: 'PT5M'

#========== Actions for ASG
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 1
      ScalingAdjustment: -1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 1
      ScalingAdjustment: 1

Outputs:
  PrivateNameSpace:
    Value: !Ref PrivateNameSpace
    Export:
      Name: !Sub ${ClusterName}PrivateNameSpace

  PrivateNameSpaceName:
    Value: !Sub ${ClusterName}.internal
    Export:
      Name: !Sub ${ClusterName}PrivateNameSpaceName

  ScaleUpPolicy:
    Value: !Ref ScaleUpPolicy
    Export:
      Name: !Sub ${ClusterName}ScaleUpPolicy

  ScaleDownPolicy:
    Value: !Ref ScaleDownPolicy
    Export:
      Name: !Sub ${ClusterName}ScaleDownPolicy

  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub ${ClusterName}BastionSecurityGroup

  ECSRoleArn:
    Value: !Sub ${ECSRole.Arn}
    Export:
      Name: !Sub ${ClusterName}ECSRoleArn

  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ClusterName}ECSCluster

  ECSClusterArn:
    Value: !Sub ${ECSCluster.Arn}
    Export:
      Name: !Sub ${ClusterName}ECSClusterArn

  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub ${ClusterName}AutoScalingGroup