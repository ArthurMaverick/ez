AWSTemplateFormatVersion: 2010-09-09
Description: Vpc Infrastructure

Parameters:
  ClusterName:
    Type: String
    Default: develop
    AllowedValues:
      - production
      - staging
      - develop
      - devops
    Description: Cluster Environment
    
#========== NumberOfAZs
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 3
    Description:  How many Availability Zones do you wish to utilize?

#========== PrivateSubnets
  PrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

#========== VPN
  HasVPN:
    Type: String
    AllowedValues:
    - True
    - False
    Default: False
    Description: Do you want to create a VPN in your VPC?

#===============================================================================
Conditions:
#========== VPN CONDITIONS
  BuildVPN: !Equals [ !Ref HasVPN, True ]
  PublicSubnetVPNAssociationA: !And [ !Equals [ !Ref HasVPN, True ], !Equals [ !Ref NumberOfAZs, 1 ] ]
  PublicSubnetVPNAssociationB: !And [ !Equals [ !Ref HasVPN, True ], !Equals [ !Ref NumberOfAZs, 2 ] ]
  PublicSubnetVPNAssociationC: !And [ !Equals [ !Ref HasVPN, True ], !Equals [ !Ref NumberOfAZs, 3 ] ]

#========== PublicSubnetsConditions
  BuildPublicB: !Not [ !Equals [ !Ref NumberOfAZs, 1 ]]
  BuildPublicC: !Equals [ !Ref NumberOfAZs, 3 ]

#========== PrivateSubnetsConditions
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA:       !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB:       !And [ !Not [ !Equals [ !Ref NumberOfAZs,1 ]], !Equals [ !Ref PrivateSubnets,True ]]
  BuildPrivateC:       !And [ !Equals [ !Ref NumberOfAZs,3 ], !Equals [ !Ref PrivateSubnets, True ]]

Resources:
#========== INTERNAL ACCESS SECURITY GROUP
  InternalAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${ClusterName}AllowInternalAccess
      GroupDescription: Enables access to all VPC protocols and IPs
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: !Sub 10.0.0.0/16
          Description: ALLOW INGRESS ALL
  
  ExternalAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${ClusterName}ExternalSecurityGroup
      GroupDescription: Enables external access
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: ENABLE ALL INGRESS
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: ENABLE ALL EGRESS

  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildVPN
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${ClusterName}VPNSecurityGroup
      GroupDescription: Enables access to all VPN protocols and IPs
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: ENABLE ALL INGRESS
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
        Description: ENABLE ALL EGRESS

#========== VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}VPC

#======== INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}IGVPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway        

#======= PUBLIC SUBNET
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      VpcId: !Ref VPC
      CidrBlock:  10.10.30.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PublicSubnet3

#====== PUBLIC SUBINET ASSOCIATION
  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

#====== PUBLIC ROUTE TABLE
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#======= PRIVATE SUBNET
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.70.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PrivateSubnet3

#====== PRIVATE SUBNET ASSOCIATION
  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable  

#====== PRIVATE ROUTE TABLE
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway

#====== ELASTIC IP ADDRESS
  EIP:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnets
    Properties:
      Domain: VPC

#====== NAT GATEWAY
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt EIP.AllocationId
      Tags:
        - Key: stack
          Value: !Sub ${ClusterName}

#========== ClientVpnEndpoint
  ClientVpnEndpoint:
    Type: 'AWS::EC2::ClientVpnEndpoint'
    Condition: BuildVPN
    Properties:
      VpcId: !Ref VPC
      AuthenticationOptions:
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: 'arn:aws:acm:us-east-1:718007069360:certificate/680e3c3c-689f-4396-aec4-2c14273e0cdc'
      ClientCidrBlock: 10.11.0.0/16
      ConnectionLogOptions:
        Enabled: false
      Description: 'Client-VPN-Endpoint'
      SplitTunnel: true
      ServerCertificateArn: 'arn:aws:acm:us-east-1:718007069360:certificate/88170e78-3ebd-44d8-a40c-fa2527a45fb0'
      TagSpecifications:
        - ResourceType: !Sub '${ClusterName}-client-vpn-endpoint'
          Tags:
            - Key: Name
              Value: !Sub '${ClusterName}-VPN'
      TransportProtocol: udp

#========== ClientVpnTargetNetworkAssociation
  NetworkAssociationA:
    Type: 'AWS::EC2::ClientVpnTargetNetworkAssociation'
    Condition: PublicSubnetVPNAssociationA
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PublicSubnet1
  
  NetworkAssociationB:
    Type: 'AWS::EC2::ClientVpnTargetNetworkAssociation'
    Condition: PublicSubnetVPNAssociationB
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PublicSubnet2
  
  NetworkAssociationC:
    Type: 'AWS::EC2::ClientVpnTargetNetworkAssociation'
    Condition: PublicSubnetVPNAssociationC
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref PublicSubnet3
  
#========== ClientVpnAuthorizationRule
  AuthRule:
    Type: 'AWS::EC2::ClientVpnAuthorizationRule'
    Condition: BuildVPN
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      AuthorizeAllGroups: true
      TargetNetworkCidr: 0.0.0.0/0
      Description: Authorization Rule
  
#========== ClientVpnRoute
  ClientVPNRouteA:
    Type: 'AWS::EC2::ClientVpnRoute'
    Condition: PublicSubnetVPNAssociationA
    DependsOn: NetworkAssociationA
    Properties:
      Description: !Sub '${ClusterName}-VpnRouteA'
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      TargetVpcSubnetId: !Ref PublicSubnet1
      DestinationCidrBlock: 0.0.0.0/0

  ClientVPNRouteB:
    Type: 'AWS::EC2::ClientVpnRoute'
    Condition: PublicSubnetVPNAssociationB
    DependsOn: NetworkAssociationB
    Properties:
      Description: !Sub '${ClusterName}-VpnRouteB'
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      TargetVpcSubnetId: !Ref PublicSubnet2
      DestinationCidrBlock: 0.0.0.0/0

  ClientVPNRouteC:
    Type: 'AWS::EC2::ClientVpnRoute'
    Condition: PublicSubnetVPNAssociationC
    DependsOn: NetworkAssociationC
    Properties:
      Description: !Sub '${ClusterName}-VpnRouteC'
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      TargetVpcSubnetId: !Ref PublicSubnet3
      DestinationCidrBlock: 0.0.0.0/0

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${ClusterName}VPC

#======= PUBLIC SUBNET OUTPUT
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ClusterName}PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Condition: BuildPublicB
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ClusterName}PublicSubnet2

  PublicSubnet3:
    Description: Public Subnet 3
    Condition: BuildPublicC
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${ClusterName}PublicSubnet3

#======= PRIVATE SUBNET OUTPUT
  PrivateSubnet1:
    Description: Private Subnet 1
    Condition: BuildPrivateA
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${ClusterName}PrivateSubnet1

  PrivateSubnet2: 
    Description: Private Subnet 2
    Condition: BuildPrivateB
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${ClusterName}PrivateSubnet2

  PrivateSubnet3:
    Description: Private Subnet 3
    Condition: BuildPrivateC
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${ClusterName}PrivateSubnet3

  InternalAccessSecurityGroup:
    Description: Internal Access Security Group
    Value: !Ref InternalAccessSecurityGroup
    Export:
      Name: !Sub ${ClusterName}InternalAccessSecurityGroup
  
  ExternalAccessSecurityGroup: 
    Description: External Access Security Group
    Value: !Ref ExternalAccessSecurityGroup
    Export:
      Name: !Sub ${ClusterName}ExternalAccessSecurityGroup